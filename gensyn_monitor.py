#!/usr/bin/env python3
"""
Gensyn Peers Monitor with Telegram Notifications
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏—Ä–æ–≤ Gensyn —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–≤—è–∑–∏
"""

import asyncio
import json
import logging
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Set, Any
import aiohttp
import configparser
from dataclasses import dataclass


@dataclass
class PeerStatus:
    """–°—Ç–∞—Ç—É—Å –ø–∏—Ä–∞"""
    peer_id: str
    score: Optional[float]
    reward: Optional[float]
    is_online: bool
    last_seen: datetime
    error_message: Optional[str] = None


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    async def send_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = f"{self.base_url}/sendMessage"
        payload = {
            "chat_id": self.chat_id,
            "text": message,
            "parse_mode": "HTML"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        logging.info("Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        return True
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.status}")
                        return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False


class GensynMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∏—Ä–æ–≤ Gensyn"""
    
    def __init__(self, config_path: str = "config.ini"):
        self.config = self._load_config(config_path)
        self.telegram = TelegramNotifier(
            self.config['telegram']['bot_token'],
            self.config['telegram']['chat_id']
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        self.url_base = "https://dashboard-math.gensyn.ai/api/v1/peer?id={}"
        self.timeout = int(self.config['monitoring']['timeout'])
        self.check_interval = int(self.config['monitoring']['check_interval'])
        self.max_retries = int(self.config['monitoring']['max_retries'])
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.peer_statuses: Dict[str, PeerStatus] = {}
        self.offline_peers: Set[str] = set()
        self.last_status_report = datetime.now()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('gensyn_monitor.log'),
                logging.StreamHandler()
            ]
        )
        
    def _load_config(self, config_path: str) -> configparser.ConfigParser:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = configparser.ConfigParser()
        
        if not Path(config_path).exists():
            self._create_default_config(config_path)
            
        config.read(config_path)
        return config
    
    def _create_default_config(self, config_path: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        config = configparser.ConfigParser()
        
        config['telegram'] = {
            'bot_token': 'YOUR_BOT_TOKEN_HERE',
            'chat_id': 'YOUR_CHAT_ID_HERE'
        }
        
        config['monitoring'] = {
            'check_interval': '300',  # 5 –º–∏–Ω—É—Ç
            'timeout': '10',
            'max_retries': '3',
            'status_report_interval': '3600'  # 1 —á–∞—Å
        }
        
        config['peers'] = {
            'file_path': 'peers.txt'
        }
        
        with open(config_path, 'w') as f:
            config.write(f)
            
        logging.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_path}")
        logging.warning("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram bot_token –∏ chat_id!")
    
    def load_peer_ids(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∏—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = Path(self.config['peers']['file_path'])
        
        if not file_path.exists():
            logging.error(f"–§–∞–π–ª —Å –ø–∏—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return []
            
        with file_path.open(encoding="utf-8") as fh:
            peer_ids = [
                line.strip()
                for line in fh
                if line.strip() and not line.lstrip().startswith("#")
            ]
            
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(peer_ids)} –ø–∏—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return peer_ids
    
    async def fetch_peer_status(self, session: aiohttp.ClientSession, peer_id: str) -> PeerStatus:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ä–∞"""
        url = self.url_base.format(peer_id)
        
        for attempt in range(1, self.max_retries + 1):
            try:
                async with session.get(url, timeout=self.timeout) as response:
                    if response.status == 200:
                        data = await response.json()
                        return PeerStatus(
                            peer_id=peer_id,
                            score=data.get("score"),
                            reward=data.get("reward"),
                            is_online=True,
                            last_seen=datetime.now()
                        )
                    else:
                        error_msg = f"HTTP {response.status}"
                        if attempt == self.max_retries:
                            return PeerStatus(
                                peer_id=peer_id,
                                score=None,
                                reward=None,
                                is_online=False,
                                last_seen=datetime.now(),
                                error_message=error_msg
                            )
                        
            except Exception as e:
                error_msg = str(e)
                if attempt == self.max_retries:
                    return PeerStatus(
                        peer_id=peer_id,
                        score=None,
                        reward=None,
                        is_online=False,
                        last_seen=datetime.now(),
                        error_message=error_msg
                    )
                    
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
                
        return PeerStatus(
            peer_id=peer_id,
            score=None,
            reward=None,
            is_online=False,
            last_seen=datetime.now(),
            error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        )
    
    async def check_all_peers(self) -> List[PeerStatus]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–∏—Ä–æ–≤"""
        peer_ids = self.load_peer_ids()
        
        if not peer_ids:
            logging.warning("–ù–µ—Ç –ø–∏—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return []
        
        async with aiohttp.ClientSession() as session:
            tasks = [self.fetch_peer_status(session, peer_id) for peer_id in peer_ids]
            statuses = await asyncio.gather(*tasks)
            
        return statuses
    
    async def process_status_changes(self, statuses: List[PeerStatus]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ä–æ–≤"""
        current_offline = set()
        new_offline = []
        recovered_peers = []
        
        for status in statuses:
            peer_id = status.peer_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            self.peer_statuses[peer_id] = status
            
            if not status.is_online:
                current_offline.add(peer_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–∏—Ä –æ—Ñ–ª–∞–π–Ω —Ä–∞–Ω–µ–µ
                if peer_id not in self.offline_peers:
                    new_offline.append(status)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ –ø–∏—Ä
                if peer_id in self.offline_peers:
                    recovered_peers.append(status)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ–ª–∞–π–Ω –ø–∏—Ä–æ–≤
        self.offline_peers = current_offline
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if new_offline:
            await self._send_offline_notifications(new_offline)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        if recovered_peers:
            await self._send_recovery_notifications(recovered_peers)
    
    async def _send_offline_notifications(self, offline_statuses: List[PeerStatus]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Ç–µ—Ä–µ –ø–∏—Ä–æ–≤"""
        if len(offline_statuses) == 1:
            status = offline_statuses[0]
            message = (
                f"üî¥ <b>–ü–†–û–ü–ê–õ –ü–ò–† GENSYN</b>\n\n"
                f"<b>Peer ID:</b> <code>{status.peer_id}</code>\n"
                f"<b>–í—Ä–µ–º—è:</b> {status.last_seen.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {status.error_message or '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
            )
        else:
            message = f"üî¥ <b>–ü–†–û–ü–ê–õ–û {len(offline_statuses)} –ü–ò–†–û–í GENSYN</b>\n\n"
            for status in offline_statuses:
                message += f"‚Ä¢ <code>{status.peer_id}</code> - {status.error_message or '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
            message += f"\n<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await self.telegram.send_message(message)
        logging.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(offline_statuses)} –æ—Ñ–ª–∞–π–Ω –ø–∏—Ä–∞—Ö")
    
    async def _send_recovery_notifications(self, recovered_statuses: List[PeerStatus]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏—Ä–æ–≤"""
        if len(recovered_statuses) == 1:
            status = recovered_statuses[0]
            message = (
                f"‚úÖ <b>–ü–ò–† GENSYN –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n"
                f"<b>Peer ID:</b> <code>{status.peer_id}</code>\n"
                f"<b>Score:</b> {status.score or '‚Äî'}\n"
                f"<b>Reward:</b> {status.reward or '‚Äî'}\n"
                f"<b>–í—Ä–µ–º—è:</b> {status.last_seen.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        else:
            message = f"‚úÖ <b>–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û {len(recovered_statuses)} –ü–ò–†–û–í GENSYN</b>\n\n"
            for status in recovered_statuses:
                message += f"‚Ä¢ <code>{status.peer_id}</code>\n"
            message += f"\n<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await self.telegram.send_message(message)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {len(recovered_statuses)} –ø–∏—Ä–æ–≤")
    
    async def send_status_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ"""
        if not self.peer_statuses:
            return
        
        online_count = sum(1 for status in self.peer_statuses.values() if status.is_online)
        offline_count = len(self.peer_statuses) - online_count
        
        message = (
            f"üìä <b>–û–¢–ß–ï–¢ –û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ï GENSYN</b>\n\n"
            f"<b>–í—Å–µ–≥–æ –ø–∏—Ä–æ–≤:</b> {len(self.peer_statuses)}\n"
            f"<b>–û–Ω–ª–∞–π–Ω:</b> ‚úÖ {online_count}\n"
            f"<b>–û—Ñ–ª–∞–π–Ω:</b> ‚ùå {offline_count}\n"
            f"<b>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        if offline_count > 0:
            message += "\n\n<b>–û—Ñ–ª–∞–π–Ω –ø–∏—Ä—ã:</b>\n"
            for peer_id in self.offline_peers:
                status = self.peer_statuses.get(peer_id)
                if status:
                    message += f"‚Ä¢ <code>{peer_id}</code> - {status.error_message or '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        
        await self.telegram.send_message(message)
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç")
    
    async def run_monitoring(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logging.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∏—Ä–æ–≤ Gensyn...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.telegram.send_message(
            "üöÄ <b>GENSYN MONITOR –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥\n"
            f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        status_report_interval = int(self.config['monitoring']['status_report_interval'])
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∏—Ä—ã
                statuses = await self.check_all_peers()
                
                if statuses:
                    await self.process_status_changes(statuses)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
                    if (datetime.now() - self.last_status_report).total_seconds() >= status_report_interval:
                        await self.send_status_report()
                        self.last_status_report = datetime.now()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                online = sum(1 for s in statuses if s.is_online)
                offline = len(statuses) - online
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–Ω–ª–∞–π–Ω: {online}, –û—Ñ–ª–∞–π–Ω: {offline}")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await self.telegram.send_message(
                    f"‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê</b>\n\n"
                    f"<code>{str(e)}</code>\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
            
            # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            await asyncio.sleep(self.check_interval)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = GensynMonitor()
    
    try:
        await monitor.run_monitoring()
    except KeyboardInterrupt:
        logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await monitor.telegram.send_message(
            "‚èπÔ∏è <b>GENSYN MONITOR –û–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n"
            f"–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await monitor.telegram.send_message(
            f"üí• <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ê</b>\n\n"
            f"<code>{str(e)}</code>\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )


if __name__ == "__main__":
    asyncio.run(main())
